print("Hellow world")
version
clear
cls
cls()
1+1
#Calcule 2+4 93 ^5
2+4*5-exp(3)
log(5) +3,1416/sqrt(12)
log(5) +3,1416
log(5)+pi/sqrt(12)
2+4*5-exp(3)
log(5) + pi/
log(5)+pi/sqrt(12)
mean(3+4+5+6+7+8)
mean(3,4,5,6,7,8)
a=1
b=5
c=6
(-b +sqrt(b^2 -4*a*c))/(2*a)
a=1
b=5
c=6
(-b +sqrt(b^2 -4*a*c))/(2*a)
(b +sqrt(b^2 -4*a*c))/(2*a)
a=1
b=5
c=6
x1=(-b +sqrt(b^2 -4*a*c))/(2*a)
x2=(b +sqrt(b^2 -4*a*c))/(2*a)
v1=c(3,4,5,6,7,8)
mean(v1)
library(readxl)
install.packages(c("codetools", "KernSmooth", "nlme"))
install.packages("rmdformats")
install.packages(c("DBI", "dplyr", "fansi", "tibble", "withr"))
install.packages("rmdformats", type = "binary")
library(knitr)
library(knitr)
library(rmdformats)
install.packages('pilltabs')
install.packages("RDocumentation")
pwd
rmarkdown::render_site(encoding = "UTF-8")
install.packages("install.packages("install.packages("rmarkdown")")")
clear
cls
pwd
rmarkdown::render_site(encoding = "UTF-8")
install.packages("rmarkdown")
install.packages("rmarkdown")
rmarkdown::render_site(e)
rmarkdown::render_site(encoding = "UTF-8")
install.packages("install.packages("rmarkdown")")
install.packages("install.packages("rmarkdown")")
install.packages("rmarkdown")
rmarkdown::render_site(encoding = "UTF-8")
install.packages("~/Downloads/rmdformats_1.0.1.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("~/Desktop/rmarkdown_2.6.tgz", repos = NULL, type = .Platform$pkgType)
install.packages(shiny)
install.packages("install.packages("shiny")")
install.packages("install.packages("shiny")")
install.packages("shiny")
install.packages("shiny")
install.packages("~/Desktop/shiny_1.5.0.tgz", repos = NULL, type = .Platform$pkgType)
https://cran.rstudio.com/bin/macosx/contrib/4.0/shiny_1.5.0.tgz
install.packages("shiny")
library(readr)
library(readxl)
library(tidyverse)
library(lubridate)
library(janitor)
library(knitr)
mydata = read.csv(file.choose())
mydata = read.csv(file.choose())
install.packages("ggplot2")
ggplot2::(data=mydata,
aes(x=carat, y=price, colour=clarity))
geom_point(alpha=0.1)
ggplot2(data=mydata,
aes(x=carat, y=price, colour=clarity))
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot2(data=mydata,
aes(x=carat, y=price, colour=clarity))
geom_point(alpha=0.1)
ggplot2(data=mydata,
aes(x=carat, y=price, colour=clarity))
?round()
library(readr)
library(dplyr)
library(modeest)#Para obtener la moda
library(psych)
library(writexl)
library(modeest)
library(tidyverse)
library(knitr)
library(stats)
library(VIM)
library(plyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(PerformanceAnalytics)
library(EnvStats)
setwd("/Users/king/Desktop/ESTADISTICA_PARA_CIENCIA_-DE-DATOS/")
ART <- read_csv("articulos.csv")
ART=ART %>% filter(SECTOR==10,na.rm=TRUE )
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
lambda <- mean(COMPRAS_POR_DIA$n)
lambda <- mean(COMPRAS_POR_DIA$n)
alta = ART %>% filter(TIPO_ARTICULO =="3. Calidad Alta")
calidad_alta = as.numeric(na.omit(alta$VALOR_ARTICULO))
hist(calidad_alta, nclass=20, col="darkseagreen3", border="white", main="Calidad Alta", prob=TRUE)
EnvStats::qqPlot(calidad_alta, dist="norm", add.line=TRUE)
ks.test(calidad_alta, "pnorm", mean = mean(calidad_alta), sd = sd(calidad_alta))
count(ART,"VALOR_ARTICULO")$n
count(ART,"VALOR_ARTICULO")$n
count(ART,"VALOR_ARTICULO")$n
count(ART,"VALOR_ARTICULO",na.rm=TRUE)$n
library(Hmisc)
library(dplyr)
count(ART,"VALOR_ARTICULO")$n
count(na.omit(ART),"VALOR_ARTICULO")$n
mu = mean(na.omit(ART$DESCUENTO))
mu
t.test(na.omit(ART$DESCUENTO), mu = mu, alternative = "less")
n = sum(na.omit(ART$MONTO_PAGADO))
x=sum(na.omit(ART$DESCUENTO))
prop.test(x = x, n = n)$conf.int
ART_TIPO = ART %>%
filter(TIPO_ARTICULO %in% c("2. Calidad Media " , "3. Calidad Alta "))
CM = ART_TIPO %>%
filter(TIPO_ARTICULO =="2. Calidad Media ") %>%
select(MARGEN)
CA = ART_TIPO %>%
filter(TIPO_ARTICULO =="3. Calidad Alta ") %>%
select(MARGEN)
media_margen=mean(CM$MARGEN,na.rm = TRUE)
alta_margen=mean(CA$MARGEN, na.rm = TRUE)
varianza_media=var(CM$MARGEN,na.rm = TRUE)
varianza_alta=var(CA$MARGEN, na.rm = TRUE)
media_margen - alta_margen
t.test(ART_TIPO$MARGEN ~ ART_TIPO$TIPO_ARTICULO, conf.level=0.95,var.equal = FALSE)
media_margen - alta_margen
t.test(ART_TIPO$MARGEN ~ ART_TIPO$TIPO_ARTICULO, conf.level=0.95,var.equal = FALSE)
VarCM / VarCA
#Entonces el test de hipótesis asociado a esta relación será:
#  H0:σ2Xσ2Y=1vsH1:σ2Xσ2Y≠1
var.test(ART_TIPO$MARGEN ~ ART_TIPO$TIPO_ARTICULO, conf.level=0.95)
ART_MA = ART %>%
filter(TIPO_ARTICULO %in% c("2. Calidad Media" , "3. Calidad Alta"))
CalidadMedia = ART_MA %>%
filter(TIPO_ARTICULO =="2. Calidad Media") %>%
select(MARGEN)
CalidadAlta = ART_MA %>%
filter(TIPO_ARTICULO =="3. Calidad Alta") %>%
select(MARGEN)
MediaCM=mean(CalidadMedia$MARGEN,na.rm = TRUE)
MediaCA=mean(CalidadAlta$MARGEN, na.rm = TRUE)
VarCM=var(CalidadMedia$MARGEN,na.rm = TRUE)
VarCA=var(CalidadAlta$MARGEN, na.rm = TRUE)
MediaCM - MediaCA
t.test(ART_MA$MARGEN ~ ART_MA$TIPO_ARTICULO, conf.level=0.95,var.equal = FALSE)
ART_TIPO = ART %>%
filter(TIPO_ARTICULO %in% c("2. Calidad Media" , "3. Calidad Alta"))
CM = ART_TIPO %>%
filter(TIPO_ARTICULO =="2. Calidad Media") %>%
select(MARGEN)
CA = ART_TIPO %>%
filter(TIPO_ARTICULO =="3. Calidad Alta") %>%
select(MARGEN)
media_margen=mean(CM$MARGEN,na.rm = TRUE)
alta_margen=mean(CA$MARGEN, na.rm = TRUE)
varianza_media=var(CM$MARGEN,na.rm = TRUE)
varianza_alta=var(CA$MARGEN, na.rm = TRUE)
media_margen - alta_margen
t.test(ART_TIPO$MARGEN ~ ART_TIPO$TIPO_ARTICULO, conf.level=0.95,var.equal = FALSE)
varianza_media / varianza_alta
#Entonces el test de hipótesis asociado a esta relación será:
#  H0:σ2Xσ2Y=1vsH1:σ2Xσ2Y≠1
var.test(ART_TIPO$MARGEN ~ ART_TIPO$TIPO_ARTICULO, conf.level=0.95)
varianza_media / varianza_alta
View(ART3)
setwd("/Users/king/Desktop/ESTADISTICA_PARA_CIENCIA_-DE-DATOS/")
ART <- read_csv("articulos.csv")
ART2 <- ART %>%
select(MARGEN, VALOR_ARTICULO, TIPO_ARTICULO,CANTIDAD_ARTICULO) %>%
group_by(TIPO_ARTICULO) %>%
mutate(VALOR_UNITARIO = VALOR_ARTICULO / CANTIDAD_ARTICULO) %>%
select(MARGEN,VALOR_UNITARIO)
ART4 <- ART %>%
select(MARGEN, VALOR_ARTICULO, TIPO_ARTICULO,CANTIDAD_ARTICULO) %>%
mutate(VALOR_UNITARIO = VALOR_ARTICULO / CANTIDAD_ARTICULO) %>%
select(MARGEN,VALOR_UNITARIO)
ART3<-na.omit(ART2)
ddply(ART3, .(TIPO_ARTICULO), summarise, "corr" = cor(MARGEN, VALOR_UNITARIO, method = "spearman"))
View(ART3)
COMPRAS_POR_DIA <- ART %>% count("FECHA_COMPRA")
lambda <- mean(COMPRAS_POR_DIA$n)
lambda
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
lambda <- mean(COMPRAS_POR_DIA$n)
lambda
library(dplyr)
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
lambda <- mean(COMPRAS_POR_DIA$n)
lambda
mean(COMPRAS_POR_DIA$n)
COMPRAS_POR_DIA
COMPRAS_POR_DIA
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
count(FECHA_COMPRA)
count(ART$FECHA_COMPRA)
library(dplyr)
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
FECHA_COMPRA
FECHA_COMPRA
lambda <- mean(COMPRAS_POR_DIA$freq)
lambda
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
lambda <- mean(COMPRAS_POR_DIA$freq)
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
lambda <- mean(COMPRAS_POR_DIA$freq)
lambda
COMPRAS_POR_DIA
COMPRAS_POR_DIA <- ART %>% count(FECHA_COMPRA)
COMPRAS_POR_DIA <- ART %>% count("FECHA_COMPRA")
lambda <- mean(COMPRAS_POR_DIA$freq)
lambda
setwd("/Users/king/Desktop/ESTADISTICA_PARA_CIENCIA_-DE-DATOS/")
ART <- read_csv("articulos.csv")
ART=ART %>% filter(SECTOR==10,na.rm=TRUE )
COMPRAS_POR_DIA <- ART %>% count("FECHA_COMPRA")
lambda <- mean(COMPRAS_POR_DIA$freq)
lambda
mu = mean(na.omit(ART$DESCUENTO))
mu = mean(na.omit(ART$DESCUENTO))
t.test(na.omit(ART$DESCUENTO), mu = mu, alternative = "less")
